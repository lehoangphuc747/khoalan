---
import MainLayout from '../layouts/MainLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

// Import CSS to√†n c·ª•c
import '../styles/global.css';
---

<MainLayout title="Li√™n H·ªá - Khoa Lan">
  <Header />

  <!-- Contact Content -->
  <section class="py-20 bg-white min-h-screen">
    <div class="container mx-auto px-4">
      
      <!-- Desktop Layout (2 columns) -->
      <div class="hidden lg:block max-w-7xl mx-auto">
        <div class="grid lg:grid-cols-2 gap-16 items-center">
          
          <!-- Left Column: Phone & Store Status -->
          <div class="text-center">
            <!-- Phone Number Display -->
            <div class="mb-12">
              <h1 class="text-6xl xl:text-8xl font-black text-gray-800 mb-4">
                üìû
              </h1>
              <div class="text-5xl xl:text-7xl font-black text-red-600 mb-4">
                0867 555 211
              </div>
              <!-- Copy Button -->
              <div class="relative">
                <button onclick="copyPhoneNumber(this)" class="bg-gray-600 text-white px-6 py-3 rounded-full hover:bg-gray-700 transition-colors shadow-lg text-lg font-semibold">
                  üìã Sao ch√©p s·ªë ƒëi·ªán tho·∫°i
                </button>
                <div id="copyToastDesktop" class="absolute -top-12 left-1/2 transform -translate-x-1/2 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg text-sm font-semibold opacity-0 transition-all duration-300 pointer-events-none z-50">
                  ‚úÖ ƒê√£ sao ch√©p th√†nh c√¥ng
                </div>
              </div>
            </div>

            <!-- Store Status -->
            <div id="storeStatusDesktop" class="p-8 rounded-3xl shadow-2xl transition-colors">
              <div class="text-4xl mb-4">
                <span id="clockIconDesktop" class="inline-block transition-transform duration-1000">üïê</span>
              </div>
              <div id="statusTextDesktop" class="text-2xl font-bold mb-4"></div>
              <div id="currentTimeDesktop" class="text-lg mb-4 font-mono"></div>
              <div id="nextOpenDesktop" class="text-base"></div>
            </div>
          </div>

          <!-- Right Column: Action Buttons -->
          <div class="space-y-6">
            
            <!-- Call Button -->
            <a href="tel:0867555211" class="block bg-red-600 text-white p-6 rounded-3xl text-center hover:bg-red-700 transition-colors shadow-2xl">
              <div class="text-4xl mb-3">üìû</div>
              <div class="text-3xl font-bold">G·ªåI NGAY</div>
            </a>

            <!-- Zalo Button -->
            <a href="https://zalo.me/0867555211" target="_blank" class="block bg-blue-600 text-white p-6 rounded-3xl text-center hover:bg-blue-700 transition-colors shadow-2xl">
              <div class="mb-3 flex justify-center">
                <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Icon_of_Zalo.svg/800px-Icon_of_Zalo.svg.png" alt="Zalo" class="w-12 h-12">
              </div>
              <div class="text-3xl font-bold">NH·∫ÆN TIN QUA ZALO</div>
            </a>

            <!-- Address Button with Google Maps -->
            <a href="https://maps.app.goo.gl/TBPCKYdBMeRS91po8" target="_blank" class="block bg-orange-600 text-white p-6 rounded-3xl text-center hover:bg-orange-700 transition-colors shadow-2xl">
              <div class="text-4xl mb-3">
                <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Google_Maps_icon_%282015-2020%29.svg/1200px-Google_Maps_icon_%282015-2020%29.svg.png" alt="Google Maps" class="w-12 h-12 mx-auto">
              </div>
              <div class="text-2xl font-bold mb-2">M·ªû GOOGLE MAPS</div>
                              <div class="text-base">147 Nghƒ©a Hi·ªáp 1, Ka ƒê√¥<br>L√¢m ƒê·ªìng</div>
            </a>

          </div>
        </div>
      </div>

      <!-- Mobile Layout (original) -->
      <div class="lg:hidden max-w-2xl mx-auto">
        
        <!-- Phone Number Display -->
        <div class="text-center mb-16">
          <h1 class="text-6xl md:text-8xl font-black text-gray-800 mb-4">
            üìû
          </h1>
          <div class="text-5xl md:text-7xl font-black text-red-600 mb-8">
            0867 555 211
          </div>
          <!-- Copy Button -->
          <button onclick="copyPhoneNumber(this)" class="bg-gray-600 text-white px-8 py-4 rounded-full hover:bg-gray-700 transition-colors shadow-lg text-xl font-semibold">
            üìã Sao ch√©p s·ªë ƒëi·ªán tho·∫°i
          </button>
        </div>

        <!-- Action Buttons -->
        <div class="space-y-8">
          
          <!-- Call Button -->
          <a href="tel:0867555211" class="block bg-red-600 text-white p-8 rounded-3xl text-center hover:bg-red-700 transition-colors shadow-2xl">
            <div class="text-6xl mb-4">üìû</div>
            <div class="text-4xl font-bold">G·ªåI NGAY</div>
          </a>

          <!-- Zalo Button -->
          <a href="https://zalo.me/0867555211" target="_blank" class="block bg-blue-600 text-white p-8 rounded-3xl text-center hover:bg-blue-700 transition-colors shadow-2xl">
            <div class="mb-4 flex justify-center">
              <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Icon_of_Zalo.svg/800px-Icon_of_Zalo.svg.png" alt="Zalo" class="w-16 h-16 md:w-20 md:h-20">
            </div>
            <div class="text-4xl font-bold">CHAT ZALO</div>
          </a>

          <!-- Address Button with Google Maps -->
          <a href="https://maps.app.goo.gl/TBPCKYdBMeRS91po8" target="_blank" class="block bg-orange-600 text-white p-8 rounded-3xl text-center hover:bg-orange-700 transition-colors shadow-2xl">
            <div class="text-6xl mb-4">
              <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Google_Maps_icon_%282015-2020%29.svg/1200px-Google_Maps_icon_%282015-2020%29.svg.png" alt="Google Maps" class="w-16 h-16 md:w-20 md:h-20 mx-auto">
            </div>
            <div class="text-3xl font-bold mb-2">M·ªû GOOGLE MAPS</div>
                            <div class="text-lg">147 Nghƒ©a Hi·ªáp 1, Ka ƒê√¥<br>L√¢m ƒê·ªìng</div>
          </a>

        </div>

        <!-- Store Status -->
        <div id="storeStatus" class="mt-12 p-8 rounded-3xl text-center shadow-2xl transition-colors">
          <div class="text-5xl mb-4">
            <span id="clockIcon" class="inline-block transition-transform duration-1000">üïê</span>
          </div>
          <div id="statusText" class="text-3xl font-bold mb-4"></div>
          <div id="currentTime" class="text-xl mb-4 font-mono"></div>
          <div id="nextOpen" class="text-lg"></div>
        </div>

      </div>

    </div>
  </section>

  <Footer />
</MainLayout>

<script>
  function updateStoreStatus() {
    // L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam (UTC+7)
    const now = new Date();
    const vietnamTime = new Date(now.toLocaleString("en-US", {timeZone: "Asia/Ho_Chi_Minh"}));
    
    const currentHour = vietnamTime.getHours();
    const currentMinute = vietnamTime.getMinutes();
    const currentTime = currentHour + (currentMinute / 60);
    
    // Gi·ªù m·ªü c·ª≠a: 7:00 - 18:00
    const openTime = 7;   // 7:00 AM
    const closeTime = 18; // 6:00 PM
    
    // Mobile elements
    const storeStatus = document.getElementById('storeStatus');
    const statusText = document.getElementById('statusText');
    const currentTimeDisplay = document.getElementById('currentTime');
    const nextOpen = document.getElementById('nextOpen');
    
    // Desktop elements
    const storeStatusDesktop = document.getElementById('storeStatusDesktop');
    const statusTextDesktop = document.getElementById('statusTextDesktop');
    const currentTimeDisplayDesktop = document.getElementById('currentTimeDesktop');
    const nextOpenDesktop = document.getElementById('nextOpenDesktop');
    
    // Hi·ªÉn th·ªã th·ªùi gian hi·ªán t·∫°i v·ªõi gi√¢y
    const timeString = vietnamTime.toLocaleTimeString('vi-VN', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false
    });
    const dateString = vietnamTime.toLocaleDateString('vi-VN', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    const timeHTML = `<strong>B√¢y gi·ªù:</strong> ${timeString}<br><small>${dateString}</small>`;
    
    // Hi·ªáu ·ª©ng xoay ƒë·ªìng h·ªì
    const clockIcon = document.getElementById('clockIcon');
    const clockIconDesktop = document.getElementById('clockIconDesktop');
    
    if (clockIcon) {
      clockIcon.style.transform = `rotate(${vietnamTime.getSeconds() * 6}deg)`;
    }
    if (clockIconDesktop) {
      clockIconDesktop.style.transform = `rotate(${vietnamTime.getSeconds() * 6}deg)`;
    }
    
    // C·∫≠p nh·∫≠t cho mobile
    if (currentTimeDisplay) {
      currentTimeDisplay.innerHTML = timeHTML;
    }
    
    // C·∫≠p nh·∫≠t cho desktop
    if (currentTimeDisplayDesktop) {
      currentTimeDisplayDesktop.innerHTML = timeHTML;
    }
    
    // Ki·ªÉm tra tr·∫°ng th√°i c·ª≠a h√†ng
    if (currentTime >= openTime && currentTime < closeTime) {
      // ƒêANG M·ªû C·ª¨A - M√†u xanh
      const statusMessage = 'üü¢ C·ª¨A H√ÄNG ƒêANG M·ªû C·ª¨A';
      
      // Mobile
      if (storeStatus && statusText && nextOpen) {
        storeStatus.className = 'mt-12 p-8 rounded-3xl text-center shadow-2xl transition-colors bg-green-600 text-white';
        statusText.textContent = statusMessage;
      }
      
      // Desktop
      if (storeStatusDesktop && statusTextDesktop && nextOpenDesktop) {
        storeStatusDesktop.className = 'p-8 rounded-3xl shadow-2xl transition-colors bg-green-600 text-white';
        statusTextDesktop.textContent = statusMessage;
      }
      
      // T√≠nh th·ªùi gian ƒë√≥ng c·ª≠a
      const hoursUntilClose = closeTime - currentTime;
      const hoursLeft = Math.floor(hoursUntilClose);
      const minutesLeft = Math.floor((hoursUntilClose - hoursLeft) * 60);
      
      const closeMessage = hoursLeft > 0 
        ? `ƒê√≥ng c·ª≠a sau ${hoursLeft} gi·ªù ${minutesLeft} ph√∫t (18:00)`
        : `ƒê√≥ng c·ª≠a sau ${minutesLeft} ph√∫t (18:00)`;
      
      if (nextOpen) nextOpen.textContent = closeMessage;
      if (nextOpenDesktop) nextOpenDesktop.textContent = closeMessage;
      
    } else {
      // ƒêANG ƒê√ìNG C·ª¨A - M√†u ƒë·ªè
      const statusMessage = 'üî¥ C·ª¨A H√ÄNG ƒêANG ƒê√ìNG C·ª¨A';
      
      // Mobile
      if (storeStatus && statusText) {
        storeStatus.className = 'mt-12 p-8 rounded-3xl text-center shadow-2xl transition-colors bg-red-600 text-white';
        statusText.textContent = statusMessage;
      }
      
      // Desktop
      if (storeStatusDesktop && statusTextDesktop) {
        storeStatusDesktop.className = 'p-8 rounded-3xl shadow-2xl transition-colors bg-red-600 text-white';
        statusTextDesktop.textContent = statusMessage;
      }
      
      let nextOpenText;
      
      if (currentTime < openTime) {
        // S√°ng s·ªõm - ch∆∞a m·ªü c·ª≠a
        const hoursUntilOpen = openTime - currentTime;
        const hoursLeft = Math.floor(hoursUntilOpen);
        const minutesLeft = Math.floor((hoursUntilOpen - hoursLeft) * 60);
        
        nextOpenText = `M·ªü c·ª≠a sau ${hoursLeft} gi·ªù ${minutesLeft} ph√∫t (7:00 s√°ng)`;
      } else {
        // T·ªëi - ƒë√£ ƒë√≥ng c·ª≠a, m·ªü l·∫°i ng√†y mai
        const hoursUntilTomorrow = (24 - currentTime) + openTime;
        const hoursLeft = Math.floor(hoursUntilTomorrow);
        const minutesLeft = Math.floor((hoursUntilTomorrow - hoursLeft) * 60);
        
        nextOpenText = `M·ªü c·ª≠a l·∫°i sau ${hoursLeft} gi·ªù ${minutesLeft} ph√∫t (7:00 s√°ng mai)`;
      }
      
      const emergencyHTML = `
        <div class="mb-4">${nextOpenText}</div>
        <div class="text-2xl font-bold mb-2">‚ö†Ô∏è LI√äN H·ªÜ KH·∫®N C·∫§P:</div>
        <a href="tel:0867555211" class="text-3xl font-black text-yellow-300 hover:text-yellow-100">
          üìû 0867 555 211
        </a>
      `;
      
      const emergencyHTMLDesktop = `
        <div class="mb-3">${nextOpenText}</div>
        <div class="text-lg font-bold mb-2">‚ö†Ô∏è LI√äN H·ªÜ KH·∫®N C·∫§P:</div>
        <a href="tel:0867555211" class="text-xl font-black text-yellow-300 hover:text-yellow-100">
          üìû 0867 555 211
        </a>
      `;
      
      if (nextOpen) nextOpen.innerHTML = emergencyHTML;
      if (nextOpenDesktop) nextOpenDesktop.innerHTML = emergencyHTMLDesktop;
    }
  }
  
  // Declare copyPhoneNumber on window
  declare global {
    interface Window {
      copyPhoneNumber: (button: any) => void;
    }
  }
  
  // Function copy s·ªë ƒëi·ªán tho·∫°i
  window.copyPhoneNumber = function(button) {
    console.log('Copy function called'); // Debug log
    const phoneNumber = '0867555211';
    
    try {
      // Method 1: Modern Clipboard API
      if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(phoneNumber).then(() => {
          console.log('Clipboard API success'); // Debug log
          showCopyNotification('‚úÖ ƒê√£ sao ch√©p th√†nh c√¥ng');
        }).catch((err) => {
          console.log('Clipboard API failed, trying fallback', err); // Debug log
          fallbackCopyTextToClipboard(phoneNumber);
        });
      } else {
        console.log('Clipboard API not available, using fallback'); // Debug log
        fallbackCopyTextToClipboard(phoneNumber);
      }
    } catch (error) {
      console.log('Copy error:', error); // Debug log
      showCopyNotification('‚ùå Kh√¥ng th·ªÉ sao ch√©p');
    }
  }
  
  // Fallback copy method
  function fallbackCopyTextToClipboard(text) {
    try {
      // Create temporary textarea
      const textArea = document.createElement("textarea");
      textArea.value = text;
      textArea.style.position = "fixed";
      textArea.style.left = "-999999px";
      textArea.style.top = "-999999px";
      textArea.style.opacity = "0";
      document.body.appendChild(textArea);
      
      // Select and copy
      textArea.focus();
      textArea.select();
      textArea.setSelectionRange(0, 99999); // For mobile devices
      
      const successful = document.execCommand('copy');
      document.body.removeChild(textArea);
      
      if (successful) {
        console.log('Fallback copy success'); // Debug log
        showCopyNotification('‚úÖ ƒê√£ sao ch√©p th√†nh c√¥ng');
      } else {
        console.log('Fallback copy failed'); // Debug log
        showCopyNotification('‚ùå Kh√¥ng th·ªÉ sao ch√©p. S·ªë ƒëi·ªán tho·∫°i: 0867555211');
      }
    } catch (err) {
      console.log('Fallback error:', err); // Debug log
      showCopyNotification('‚ùå L·ªói sao ch√©p. H√£y copy th·ªß c√¥ng: 0867555211');
    }
  }
  
  // Hi·ªÉn th·ªã th√¥ng b√°o copy
  function showCopyNotification(message) {
    console.log('Showing notification:', message); // Debug log
    
    // Remove existing toast first
    const existingToast = document.querySelector('.copy-toast');
    if (existingToast) {
      existingToast.remove();
    }
    
    // Create new toast notification
    const toast = document.createElement('div');
    toast.textContent = message;
    toast.className = 'copy-toast fixed bg-green-600 text-white px-6 py-3 rounded-lg shadow-xl z-50 font-semibold text-base';
    toast.style.zIndex = '9999';
    toast.style.left = '50%';
    toast.style.bottom = '-100px'; // Start below the viewport
    toast.style.transform = 'translateX(-50%)';
    toast.style.transition = 'all 0.5s ease';
    toast.style.whiteSpace = 'nowrap';
    
    // Add to document body for fixed positioning
    document.body.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
      toast.style.bottom = '30px'; // Move up into view
    }, 10);
    
    // Remove after 3 seconds
    setTimeout(() => {
      toast.style.bottom = '-100px'; // Move down out of view
      setTimeout(() => {
        if (document.body.contains(toast)) {
          document.body.removeChild(toast);
        }
      }, 500);
    }, 3000);
  }
  
  // C·∫≠p nh·∫≠t ngay khi trang load
  document.addEventListener('DOMContentLoaded', updateStoreStatus);
  
  // C·∫≠p nh·∫≠t m·ªói gi√¢y (1000ms) ƒë·ªÉ th·∫•y hi·ªáu ·ª©ng r√µ r√†ng
  setInterval(updateStoreStatus, 1000);
</script>

 