---
const formId = `sendoContactForm-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="contact-form-container">
  <form id={formId} class="contact-form">
    <div class="form-group">
      <input 
        type="text" 
        name="fullName"
        placeholder="Họ và Tên *" 
        required
        class="form-input"
      />
    </div>
    
    <div class="form-group">
      <input 
        type="tel" 
        name="phone"
        placeholder="Số điện thoại *" 
        required
        class="form-input phone-input"
      />
    </div>
    
    <div class="form-group">
      <input 
        type="email" 
        name="email"
        placeholder="Email (không bắt buộc)" 
        class="form-input"
      />
    </div>
    
    <div class="form-group">
      <textarea 
        name="requirements"
        placeholder="Nhu cầu của bạn (ví dụ: xây nhà xưởng 1000m2, cần báo giá...)" 
        rows="4" 
        class="form-input"
        required
      ></textarea>
    </div>
    
    <button type="submit" class="submit-button">
      <span class="button-text">Gửi Yêu Cầu Ngay</span>
      <span class="loading-spinner" style="display: none;">
        <svg class="animate-spin" width="20" height="20" viewBox="0 0 24 24" fill="none">
          <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" stroke-opacity="0.3"></circle>
          <path fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      </span>
    </button>
    
    <div class="form-message" style="display: none;"></div>
  </form>
</div>

<style>
  .contact-form-container {
    max-width: 36rem;
    margin: 0 auto;
  }

  .contact-form {
    display: grid;
    gap: 1rem;
  }

  .form-group {
    position: relative;
  }

  .form-input {
    width: 100%;
    padding: 0.875rem;
    border: 2px solid #d1d5db;
    border-radius: 12px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: white;
  }

  .form-input:focus {
    outline: none;
    border-color: #1d4ed8;
    box-shadow: 0 0 0 3px rgba(29, 78, 216, 0.1);
  }

  .form-input:invalid:not(:placeholder-shown) {
    border-color: #dc2626;
  }

  .form-input:valid:not(:placeholder-shown) {
    border-color: #16a34a;
  }

  textarea.form-input {
    resize: vertical;
    min-height: 120px;
    font-family: inherit;
  }

  .submit-button {
    width: 100%;
    background: #1d4ed8;
    color: white;
    font-weight: bold;
    padding: 0.875rem 1.5rem;
    border: none;
    border-radius: 12px;
    font-size: 1.125rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    position: relative;
  }

  .submit-button:hover:not(:disabled) {
    background: #1e40af;
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(29, 78, 216, 0.3);
  }

  .submit-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .form-message {
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
    font-weight: 500;
  }

  .form-message.success {
    background: #dcfce7;
    color: #16a34a;
    border: 1px solid #bbf7d0;
  }

  .form-message.error {
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }

  @media (max-width: 768px) {
    .form-input {
      padding: 0.75rem;
      font-size: 0.9rem;
    }
    
    .submit-button {
      padding: 0.75rem 1rem;
      font-size: 1rem;
    }
  }
</style>

<script is:inline define:vars={{ formId }}>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById(formId);
    if (!form) return;
    
    const submitBtn = form.querySelector('.submit-button');
    const buttonText = submitBtn.querySelector('.button-text');
    const loadingSpinner = submitBtn.querySelector('.loading-spinner');
    const formMessage = form.querySelector('.form-message');
    const phoneInput = form.querySelector('.phone-input');

    // Phone number formatting
    phoneInput.addEventListener('input', function(e) {
      let value = e.target.value.replace(/\D/g, '');
      if (value.length >= 10) {
        value = value.substring(0, 10);
        // Format: 0xxx xxx xxx
        if (value.startsWith('0')) {
          value = value.replace(/(\d{4})(\d{3})(\d{3})/, '$1 $2 $3');
        }
      }
      e.target.value = value;
    });

    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Disable submit button and show loading
      submitBtn.disabled = true;
      buttonText.style.display = 'none';
      loadingSpinner.style.display = 'flex';
      
      // Get form data
      const formData = new FormData(form);
      const data = {
        fullName: formData.get('fullName'),
        phone: formData.get('phone'),
        email: formData.get('email'),
        requirements: formData.get('requirements'),
        timestamp: new Date().toISOString(),
        source: 'SENDO Landing Page'
      };

      // Simulate API call (replace with actual endpoint)
      setTimeout(() => {
        // Reset button
        submitBtn.disabled = false;
        buttonText.style.display = 'block';
        loadingSpinner.style.display = 'none';
        
        // Show success message
        showMessage('Cảm ơn bạn! Chúng tôi sẽ liên hệ trong vòng 24 giờ.', 'success');
        
        // Reset form
        form.reset();
        
        // Log data (for development)
        console.log('Form submitted:', data);
        
        // Here you would normally send to your backend
        // fetch('/api/contact', { method: 'POST', body: JSON.stringify(data) })
        
      }, 2000);
    });

    function showMessage(message, type) {
      formMessage.textContent = message;
      formMessage.className = `form-message ${type}`;
      formMessage.style.display = 'block';
      
      // Hide message after 5 seconds
      setTimeout(() => {
        formMessage.style.display = 'none';
      }, 5000);
    }

    // Form validation feedback
    const inputs = form.querySelectorAll('.form-input[required]');
    inputs.forEach(input => {
      input.addEventListener('blur', function() {
        if (this.value.trim() === '') {
          this.style.borderColor = '#dc2626';
        } else {
          this.style.borderColor = '#16a34a';
        }
      });
    });
  });
</script>
